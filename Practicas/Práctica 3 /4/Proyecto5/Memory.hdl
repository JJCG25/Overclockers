// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	  // RAM general, que usa direcciones desde 0 hasta 16383
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);

    // Pantalla (Screen), que usa direcciones desde 16384 a 24575
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);

    // Teclado (Keyboard), que solo devuelve el valor en una dirección fija (24576)
    Keyboard(out=keyboardOut);

    // Multiplexor para seleccionar entre RAM, pantalla o teclado
    Mux16(a=ramOut, b=screenOut, sel=screenSel, out=out1);
    Mux16(a=out1, b=keyboardOut, sel=keyboardSel, out=out);

    // Señales de carga para la RAM y la pantalla
    And(a=load, b=ramSel, out=ramLoad);
    And(a=load, b=screenSel, out=screenLoad);

    // Lógica de selección para RAM, pantalla, y teclado
    // Si address[14] es 0, selecciona RAM; si address[14] es 1 y address[13] es 0, selecciona Screen

    // Negar el bit address[13] y guardarlo en una señal intermedia
    Not(in=address[13], out=notAddress13);

    // RAM se selecciona si el bit 14 es 0
    Not(in=address[14], out=ramSel);

    // Screen se selecciona si address[14]=1 y address[13]=0
    And(a=address[14], b=notAddress13, out=screenSel);

    // Keyboard se selecciona si address[14]=1 y address[13]=1
    And(a=address[14], b=address[13], out=keyboardSel);
}