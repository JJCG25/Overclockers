// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/PC.hdl
/**
 * A 16-bit counter.
 * if      reset(t): out(t+1) = 0
 * else if load(t):  out(t+1) = in(t)
 * else if inc(t):   out(t+1) = out(t) + 1
 * else              out(t+1) = out(t)
 */
CHIP PC {
    IN in[16], reset, load, inc;
    OUT out[16];
    
    //Para este chip nos apoyamos con un video que encontramos en youtube
    PARTS:
    // Incrementar el valor de regout cuando inc es verdadero
    Inc16(in=regout, out=plusone);

    // Si inc es verdadero, selecciona entre false o el valor incrementado
    Mux16(a=false, b=plusone, sel=inc, out=incout);

    // Si load es verdadero, selecciona entre incout o el valor de entrada in
    Mux16(a=incout, b=in, sel=load, out=loadout);

    // Si reset es verdadero, selecciona entre loadout o false (resetea a 0)
    Mux16(a=loadout, b=false, sel=reset, out=toload);

    // Crear una se침al de control que combine load y reset
    Or(a=load, b=reset, out=loadorreset);

    // Crear la se침al de control de carga final combinando loadorreset e inc
    Or(a=loadorreset, b=inc, out=loadflag);

    // El valor se almacena en el registro, que actualiza en funci칩n de la se침al loadflag
    Register(in=toload, load=loadflag, out=regout);

    // La salida del PC es el valor almacenado en el registro
    Or16(a=regout, b=regout, out=out);
    /*
    https://www.youtube.com/watch?v=OtYThiPPo64
    */
}